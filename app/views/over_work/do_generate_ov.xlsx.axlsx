require 'set'


wb = xlsx_package.workbook 
 
#Стили к таблицам
s = wb.styles
header = s.add_style sz: 12, alignment: {horizontal: :right, wrap_text: true}, font_name: 'Times New Roman'
table_title1 = s.add_style sz: 11, alignment: {horizontal: :center}, font_name: 'Times New Roman', b: true
table_title2 = s.add_style sz: 11, alignment: {horizontal: :center, vertical: :center, wrap_text: :true}, font_name: 'Times New Roman', b: true, border: {style: :thin, color: '000000'}
group_title = s.add_style sz: 11, alignment: {horizontal: :center, vertical: :center, wrap_text: :true}, font_name: 'Times New Roman', i: true, border: {style: :thin, color: '000000'}
issues_row = s.add_style sz: 11, alignment: {horizontal: :left, vertical: :center, wrap_text: :true}, font_name: 'Times New Roman', border: {style: :thin, color: '000000'}
estimate_issue_row = s.add_style sz: 11, alignment: {horizontal: :center, vertical: :center, wrap_text: :true}, font_name: 'Times New Roman', border: {style: :thin, color: '000000'}
signature = s.add_style sz: 11, alignment: {horizontal: :left, vertical: :bottom}, font_name: 'Times New Roman'
issue_iter = s.add_style sz: 11, alignment: {horizontal: :center, vertical: :center, wrap_text: :true}, font_name: 'Times New Roman', border: {style: :thin, color: '000000'}


issues = Issue.all
users = User.all

job_title_field = CustomField.find_by(name: 'job_title')
directors = users.joins(:custom_values).where(custom_values:{custom_field_id: job_title_field.id, value: 'Директор'})

wb.add_worksheet(name: "Report") do |sheet|
    rt = Axlsx::RichText.new
    rt2 = Axlsx::RichText.new
    rt.add_run('УТВЕРЖДАЮ')
    rt.add_run("\n")
    rt.add_run('Директор ООО НИИСТИС')
    rt.add_run("\n")
    rt.add_run(' ')
    rt.add_run("\n")

    directors.each do |user|
        directors_surname = user.custom_field_values.detect {|cf| cf.custom_field.name == 'surname'}.to_s
        rt.add_run("_____________ #{user.firstname[0]}. #{directors_surname[0]}. #{user.lastname}")
    end

    rt.add_run("\n")
    current_year = Date.today.year
    rt.add_run("«_____» ___________ #{current_year} г.")
    sheet.add_row ["","",rt, ""],height: 80, style: header

    sheet.merge_cells("C1:D1")
    sheet.add_row ["", "", "", ""] 

    tp_wrk = ""

    if @global_type_overwork == "option_1"
        tp_wrk = "о проделанной работе сотрудников за выходные дни"
    else
        tp_wrk = "о проделанной сверхурочной работе сотрудников"
    end

    sheet.add_row ["Отчет #{tp_wrk}", "", "", ""], style: table_title1
    sheet.merge_cells("A3:D3")
    sheet.add_row ["Дата", "", "", ""], style: table_title2
    sheet.merge_cells("A4:D4")
    sheet.add_row ["Наименование подразделения", "", "", ""], style: table_title2
    sheet.merge_cells("A5:D5")
    sheet.add_row ["№ п/п", "Должность ФИО работника", "Проделанная работа", "Время работы"], style: table_title2
    users_loop = User.find(@global_user_ids)
    iterator = 7
    vertical_merge_iterator = 0

    @date_range_overtime.each do |date_todo|
        custom_field = TimeEntryCustomField.find_by(name: 'Тип работ')
        entries = TimeEntry
            .joins(:custom_values)
            .where(spent_on: date_todo)
            .where(custom_values: {
            custom_field_id: custom_field.id,
            value: 'Сверхурочная'
        })


        if tp_wrk == "о проделанной работе сотрудников за выходные дни"
            if date_todo.saturday? || date_todo.sunday?
                if entries.exists? 
                    sheet.add_row ["#{date_todo.strftime("%d.%m.%Y")} г. (#{I18n.l(date_todo, format: "%A")})", "", "", ""], style: table_title2
                    sheet.merge_cells("A#{iterator}:D#{iterator}")
                    iterator += 1
                    #-----------------------Обработка групп, пользователей, задач
                    printed_groups_by_date = Hash.new { |hash, key| hash[key] = Set.new }
                    selected_users = User.find(@global_user_ids)

                    selected_users.each do |user|
                        custom_field_users_surname = user.custom_field_values.detect {|cf| cf.custom_field.name == 'surname'}
                        custom_field_users_job_title = user.custom_field_values.detect {|cf| cf.custom_field.name == 'job_title'}

                        group = user.groups
                        serial_number = 1
                        group.each do |user_group|

                            time_entries = TimeEntry
                                .joins(:custom_values)
                                .where(user_id: user.id, spent_on: date_todo)
                                .where(custom_values: {
                                custom_field_id: custom_field.id,
                                value: 'Сверхурочная'
                            })


                            group_name = user_group.to_s


                            issues = Issue.where(id: time_entries.pluck(:issue_id).uniq)  

                            if issues == []
                                next
                            end 


                            unless printed_groups_by_date[date_todo].include?(group_name)
                                sheet.add_row ["#{group_name}", "", "", ""], style: group_title
                                sheet.merge_cells("A#{iterator}:D#{iterator}")
                                printed_groups_by_date[date_todo] << group_name
                                iterator += 1
                                vertical_merge_iterator = iterator
                            end

                            issues.group_by(&:assigned_to).each do |owner, owner_issues|
                                next if owner.nil?

                                merge_start = iterator

                                task_count = owner_issues.size


                                owner_issues.each_with_index do |issue, idx|

                                    total_estimate_time = 0

                                    formatted_time = nil

                                    time_entries.each do |ent|
                                        next unless ent.issue_id == issue.id
                                        total_estimate_time = ent.hours
                                        h = total_estimate_time.floor
                                        m = ((total_estimate_time - h) * 60).round
                                        formatted_time = format("%d:%02d", h, m)
                                    end

                                    serial = idx.zero? ? serial_number : ""

                                    sheet.add_row [
                                        "#{serial}",
                                        "#{custom_field_users_job_title}\n#{user.firstname.to_s[0]}.#{custom_field_users_surname.to_s[0]}. #{user.lastname}",
                                        "#{issue.description}",
                                        "#{formatted_time}"
                                    ], style: [issue_iter, issues_row, issues_row, estimate_issue_row]
                                    iterator += 1
                                end

                                if task_count > 1
                                    merge_end = iterator - 1
                                    sheet.merge_cells("A#{merge_start}:A#{merge_end}")
                                    sheet.merge_cells("B#{merge_start}:B#{merge_end}")
                                end

                                serial_number += 1
                            end
                        end
                    end
                    #-----------------------Конец обработки
                else
                    next
                end
            else
                next
            end
        else
            if date_todo.saturday? || date_todo.sunday?
                next
            else
                if entries.exists? 
                    sheet.add_row ["#{date_todo.strftime("%d.%m.%Y")} г. (#{I18n.l(date_todo, format: "%A")})", "", "", ""], style: table_title2
                    sheet.merge_cells("A#{iterator}:D#{iterator}")
                    iterator += 1
                    #-----------------------Обработка групп, пользователей, задач
                    printed_groups_by_date = Hash.new { |hash, key| hash[key] = Set.new }
                    selected_users = User.find(@global_user_ids)

                    selected_users.each do |user|
                        custom_field_users_surname = user.custom_field_values.detect {|cf| cf.custom_field.name == 'surname'}
                        custom_field_users_job_title = user.custom_field_values.detect {|cf| cf.custom_field.name == 'job_title'}

                        group = user.groups
                        serial_number = 1
                        group.each do |user_group|

                            time_entries = TimeEntry
                                .joins(:custom_values)
                                .where(user_id: user.id, spent_on: date_todo)
                                .where(custom_values: {
                                custom_field_id: custom_field.id,
                                value: 'Сверхурочная'
                            })


                            group_name = user_group.to_s


                            issues = Issue.where(id: time_entries.pluck(:issue_id).uniq)  

                            if issues == []
                                next
                            end 


                            unless printed_groups_by_date[date_todo].include?(group_name)
                                sheet.add_row ["#{group_name}", "", "", ""], style: group_title
                                sheet.merge_cells("A#{iterator}:D#{iterator}")
                                printed_groups_by_date[date_todo] << group_name
                                iterator += 1
                                vertical_merge_iterator = iterator
                            end

                            issues.group_by(&:assigned_to).each do |owner, owner_issues|
                                next if owner.nil?

                                merge_start = iterator

                                task_count = owner_issues.size


                                owner_issues.each_with_index do |issue, idx|

                                    total_estimate_time = 0

                                    formatted_time = nil

                                    time_entries.each do |ent|
                                        next unless ent.issue_id == issue.id
                                        total_estimate_time = ent.hours
                                        h = total_estimate_time.floor
                                        m = ((total_estimate_time - h) * 60).round
                                        formatted_time = format("%d:%02d", h, m)
                                    end

                                    serial = idx.zero? ? serial_number : ""

                                    sheet.add_row [
                                        "#{serial}",
                                        "#{custom_field_users_job_title}\n#{user.firstname.to_s[0]}.#{custom_field_users_surname.to_s[0]}. #{user.lastname}",
                                        "#{issue.description}",
                                        "#{formatted_time}"
                                    ], style: [issue_iter, issues_row, issues_row, estimate_issue_row]
                                    iterator += 1
                                end

                                if task_count > 1
                                    merge_end = iterator - 1
                                    sheet.merge_cells("A#{merge_start}:A#{merge_end}")
                                    sheet.merge_cells("B#{merge_start}:B#{merge_end}")
                                end

                                serial_number += 1
                            end
                        end
                    end

                    #-----------------------Конец обработки
                else
                    next
                end
            end
        end
    end
    
    iterator += 3
    sheet.add_row [""]
    sheet.add_row [""]
    sheet.add_row ["Согласовано:"], style: signature
    sheet.add_row ["Начальник УНТР __________________ Д.С. Бикзигитов", "", "", ""], style: signature
    sheet.merge_cells("A#{iterator}:D#{iterator}")
    iterator += 1   
    sheet.add_row [""]
    iterator += 1
    sheet.add_row ["С отчетом ознакомлены:", "", "", ""], style: signature
    sheet.merge_cells("A#{iterator}:D#{iterator}")
    iterator += 1
    users_loop.each do |usr|
        custom_field_users_surname = usr.custom_field_values.detect {|cf| cf.custom_field.name == 'surname'}
        sheet.add_row ["#{usr.firstname.to_s[0]}.#{custom_field_users_surname.to_s[0]}. #{usr.lastname}________________", ""], style: signature
        sheet.merge_cells("A#{iterator}:D#{iterator}")
        iterator += 1
    end

    sheet.column_widths 4, 30, 47, 8
end