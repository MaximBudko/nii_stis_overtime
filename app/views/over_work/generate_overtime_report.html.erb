<%= form_with url: do_generate_ov_path(format: :xlsx), method: :post, local: true do |f| %>
  <fieldset>
    <legend><strong>–î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç:</strong></legend>
    <div style="display: flex; gap: 20px;">
      <div>
        <label>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:</label><br>
        <%= date_field_tag :start_date, nil, id: 'start_date_picker' %>
      </div>
      <div>
        <label>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</label><br>
        <%= date_field_tag :end_date, nil, id: 'end_date_picker' %>
      </div>
    </div>
  </fieldset>

  <fieldset style="margin-top: 20px;">
    <legend><strong>–¢–∏–ø –æ—Ç—á–µ—Ç–∞ –∏ –¥–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è:</strong></legend>
    <%= select_tag :option_select, options_for_select([['–í –≤—ã—Ö–æ–¥–Ω—ã–µ', 'option_1'], ['–í –±—É–¥–Ω–∏', 'option_2']]), include_blank: '--- –í—ã–±–µ—Ä–∏—Ç–µ ---' %>
    <%= date_field_tag :constuct_date, nil, id: 'construct_date_picker'%>
  </fieldset>

  <fieldset style="margin-top: 20px;">
    <legend><strong>–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Å "–°–≤–µ—Ä—Ö—É—Ä–æ—á–Ω–æ–π" —Ä–∞–±–æ—Ç–æ–π:</strong></legend>
    <div id="user_cards_container" style="display: grid; grid-template-columns: repeat(auto-fill, minmax(280px, 1fr)); gap: 12px;"></div>
  </fieldset>

  <br>
  <div style="margin-top: 20px; margin-right: 20px;">
    <%= button_tag(type: "submit", name: "report_type", value: "excel", class: "submit-button") do %>
        üìä –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç (Excel)
    <% end %>
    <%= button_tag(type: "submit", name: "report_type", value: "dokladnaya", class: "submit-button") do %>
        üìÑ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –î–æ–∫–ª–∞–¥–Ω—É—é
    <% end %>
  </div>
<% end %>

<!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏ —Ñ–æ—Ä–º–∞ -->

<%= form_with url: query_constructor_path(format: :xlsx), method: :post, local: true do |l| %>
  <div style="margin-top: 5px; width: 492px; height: 52px;" >
    <%= hidden_field_tag :report_data, "", id: "report-data-field" %>
    <%= button_tag(type: "button", class: "submit-button-construct", id: "open-modal-btn") do %>
      –û—Ç–∫—Ä—ã—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –î–æ–∫–ª–∞–¥–Ω–æ–π
    <% end %>
  </div>

<div id="modal-overlay" style="display:none;"></div>

<div id="modal-card" style="display:none;">
  <h3>–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –î–æ–∫–ª–∞–¥–Ω–æ–π</h3>

  <div class="modal-buttons">
    <%= button_tag "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", type: "button", id: "add-row-btn", class: "button" %>
    <%= button_tag "–£–¥–∞–ª–∏—Ç—å", type: "button", id: "remove-row-btn", class: "button" %>
    <%= select_tag :option_select_modal, options_for_select([['–í –≤—ã—Ö–æ–¥–Ω—ã–µ', 'option_1'], ['–í –±—É–¥–Ω–∏', 'option_2']]), include_blank: '--- –í—ã–±–µ—Ä–∏—Ç–µ ---' %>
  </div>

  <table id="user-table" class="list">
    <thead>
      <tr>
        <th>–ê–∫—Ç–∏–≤–µ–Ω</th>
        <th>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</th>
        <th>–û—Ç–¥–µ–ª</th>
        <th>–î–æ–ª–∂–Ω–æ—Å—Ç—å</th>
        <th>–î–∞—Ç–∞</th>
        <th>–ü—Ä–æ–µ–∫—Ç</th>
      </tr>
    </thead>
    <tbody>
      <datalist id="user-datalist">
      <% @users.each do |u| %>
      <% surname = u.custom_field_value(@cf_surname).to_s %>
      <% short_name = "#{u.firstname.first}.#{surname.first}. #{u.lastname}" %>
      <option value="<%= short_name %>">
      <% end %>
      </datalist>
      <!-- —Å—Ç—Ä–æ–∫–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è JS-–æ–º -->
    </tbody>
  </table>

  <%= button_tag "–û—Ç–ø—Ä–∞–≤–∏—Ç—å", type: "button", id: "submit-btn", class: "button" %>
</div>



<% end %>

<%= javascript_tag do %>
  document.addEventListener('DOMContentLoaded', () => {
    const startInput = document.getElementById('start_date_picker');
    const endInput = document.getElementById('end_date_picker');
    const userContainer = document.getElementById('user_cards_container');

    function fetchUsers() {
      const startDate = startInput.value;
      const endDate = endInput.value;

      if (!startDate || !endDate) return;

      fetch(`/overtime_report/users_by_date?start_date=${startDate}&end_date=${endDate}`, {
        headers: { 'Accept': 'application/json' }
      })
      .then(response => response.json())
      .then(users => {
        userContainer.innerHTML = '';

        if (users.length === 0) {
          userContainer.innerHTML = '<p>–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å "–°–≤–µ—Ä—Ö—É—Ä–æ—á–Ω–æ–π" —Ä–∞–±–æ—Ç–æ–π –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.</p>';
          return;
        }

        users.forEach(user => {
          const card = document.createElement('label');
          card.className = 'user-card';

          const topLine = document.createElement('div');
          topLine.className = 'top-line';

          const checkbox = document.createElement('input');
          checkbox.type = 'checkbox';
          checkbox.name = 'user_ids[]';
          checkbox.value = user.id;

          const name = document.createElement('span');
          name.className = 'user-name';
          name.textContent = user.name;

          topLine.appendChild(checkbox);
          topLine.appendChild(name);

          const dates = document.createElement('div');
          dates.className = 'user-dates';

          dates.innerHTML = user.entries.map(entry => {
            const d = new Date(entry.date);
            const weekday = d.toLocaleDateString('ru-RU', { weekday: 'short' });
            return `${d.toLocaleDateString()} (${weekday}) ‚Äì ${entry.hours} —á`;
          }).join('<br>');

          card.appendChild(topLine);
          card.appendChild(dates);
          userContainer.appendChild(card);
        });
      });
    }

    startInput.addEventListener('change', fetchUsers);
    endInput.addEventListener('change', fetchUsers);
  });
<% end %>

<style>

  .user-card {
    display: flex;
    flex-direction: column;
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 10px;
    background: #f9f9f9;
    cursor: pointer;
    transition: background 0.2s ease;
  }

  .user-card:hover {
    background: #eef;
  }

  .top-line {
    display: flex;
    align-items: center;
    gap: 8px;
    margin-bottom: 4px;
  }

  .top-line input[type="checkbox"] {
    margin: 0;
  }

  .user-name {
    font-weight: bold;
  }

  .user-dates {
    font-size: 12px;
    color: #555;
    margin-left: 22px;
  }
  .submit-button-construct {
    background-color: #0073e6 !important;
    color: #fff !important;
    padding: 8px 16px !important;
    width: 100% !important;
    height: 100% !important;
    display: block !important;
    border-radius: 6px !important;
    border: none !important;
    font-weight: bold !important;
    cursor: pointer !important;
    font-size: 14px !important;
  }
  .submit-button-construct:hover {
    background-color: #005bb5 !important;
  }

  .submit-button {
    background-color: #0073e6 !important;
    color: #fff !important;
    height: 50px !important;
    padding: 8px 16px !important;
    border-radius: 6px !important;
    border: none !important;
    font-weight: bold !important;
    cursor: pointer !important;
    font-size: 14px !important;
  }

  .submit-button:hover {
    background-color: #005bb5 !important;
  }

  #modal-overlay {
    position: fixed; top: 0; left: 0; width: 100%; height: 100%;
    background: rgba(0, 0, 0, 0.5);
    z-index: 999;
  }
  #modal-card {
    position: fixed;
    top: 50%; left: 50%;
    transform: translate(-50%, -50%);
    background: #fff;
    padding: 20px;
    border: 1px solid #ccc;
    z-index: 1000;
    max-width: 90%;
    width: 960px;
    box-shadow: 0 0 20px rgba(0,0,0,0.3);
    border-radius: 4px;
  }
  .modal-buttons {
    display: flex;
    gap: 10px;
    margin: 10px 0;
  }
  table.list select,
  table.list input[type="text"],
  table.list input[type="date"] {
    width: 100%;
    box-sizing: border-box;
  }

  input.expandable {
  transition: width 0.2s ease;
  width: 100%;
  max-width: 300px;
}
</style>



<script>
  document.addEventListener("DOMContentLoaded", function () {
    const openBtn = document.getElementById("open-modal-btn");
    const overlay = document.getElementById("modal-overlay");
    const modal = document.getElementById("modal-card");
    const addRowBtn = document.getElementById("add-row-btn");
    const removeRowBtn = document.getElementById("remove-row-btn");
    const submitBtn = document.getElementById("submit-btn");
    const tableBody = document.querySelector("#user-table tbody");

    <%
      users_json = @users.map do |u|
        surname  = u.custom_field_value(@cf_surname).to_s
        job_title = u.custom_field_value(@cf_job_title).to_s
        short_name = "#{u.firstname.first}.#{surname.first}. #{u.lastname}"

        {
          id: u.id,
          name: short_name,
          department: u.groups.first&.name || '',
          job_title: job_title
        }
      end
    %>

    const users = <%= raw users_json.to_json %>;


    const projects = <%= raw @projects.map { |p| { id: p.id, name: p.name } }.to_json %>;

    openBtn.addEventListener("click", () => {
      overlay.style.display = "block";
      modal.style.display = "block";
    });

    overlay.addEventListener("click", () => {
      overlay.style.display = "none";
      modal.style.display = "none";
    });

    removeRowBtn.addEventListener("click", () => {
      if (tableBody.rows.length > 0) tableBody.deleteRow(-1);
    });

      addRowBtn.addEventListener("click", () => {
        const row = tableBody.insertRow();

        // 1. –ß–µ–∫–±–æ–∫—Å
        const checkboxCell = row.insertCell();
        const checkbox = document.createElement("input");
        checkbox.type = "checkbox";
        checkbox.checked = true;
        checkboxCell.appendChild(checkbox);

        // 2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–ø–æ–∏—Å–∫ –ø–æ —Ñ–∞–º–∏–ª–∏–∏)
        const userCell = row.insertCell();
        const userInput = document.createElement("input");
        userInput.setAttribute("list", "user-datalist");
        userInput.className = "text user-search";
        userInput.placeholder = "–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é";
        userCell.appendChild(userInput);

        // –•—Ä–∞–Ω–∏–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–ø—Ä—è—Ç–∞–Ω–Ω–æ–µ –ø–æ–ª–µ)
        const hiddenUserId = document.createElement("input");
        hiddenUserId.type = "hidden";
        userCell.appendChild(hiddenUserId);

        // 3. –û—Ç–¥–µ–ª
        const deptCell = row.insertCell();
        const deptInput = document.createElement("input");
        deptInput.type = "text";
        deptInput.className = "text expandable";
        deptCell.appendChild(deptInput);

        // 4. –î–æ–ª–∂–Ω–æ—Å—Ç—å
        const jobCell = row.insertCell();
        const jobInput = document.createElement("input");
        jobInput.type = "text";
        jobInput.className = "text expandable";
        jobCell.appendChild(jobInput);

        // 5. –î–∞—Ç–∞
        const dateCell = row.insertCell();
        const dateInput = document.createElement("input");
        dateInput.type = "date";
        dateInput.className = "text";
        dateCell.appendChild(dateInput);

        // 6. –ü—Ä–æ–µ–∫—Ç
        const projCell = row.insertCell();
        const projSelect = document.createElement("select");
        projSelect.className = "select";
        projSelect.innerHTML = projects.map(p =>
          `<option value="${p.id}">${p.name}</option>`
        ).join("");
        projCell.appendChild(projSelect);

        // üß† –°–æ–±—ã—Ç–∏–µ: –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞
        userInput.addEventListener("input", function () {
          const match = users.find(u => u.name.toLowerCase().includes(this.value.toLowerCase()));
          if (match) {
            deptInput.value = match.department;
            jobInput.value = match.job_title;
            hiddenUserId.value = match.id;
          }
        });

        // üìè –ê–≤—Ç–æ-—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø–æ–ª–µ–π –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ
        [deptInput, jobInput].forEach(input => {
          input.addEventListener("focus", () => input.style.width = "300px");
          input.addEventListener("blur", () => input.style.width = "100%");
        });
      });


    submitBtn.addEventListener("click", () => {
      const result = [];

      for (let row of tableBody.rows) {
        const active = row.cells[0].querySelector("input").checked;
        if (!active) continue; // ‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ

        const userId = row.cells[1].querySelector("input[type='hidden']").value;

        const data = {
          active: true,
          user_id: userId,
          department: row.cells[2].querySelector("input").value,
          job_title: row.cells[3].querySelector("input").value,
          date: row.cells[4].querySelector("input").value,
          project_id: row.cells[5].querySelector("select").value
        };

        result.push(data);
      }

      const hiddenField = document.getElementById("report-data-field");
      hiddenField.value = JSON.stringify(result);
      hiddenField.form.submit();
    });

  });
</script>

